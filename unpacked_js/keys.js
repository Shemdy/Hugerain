var initialize = (function () {
    var isFirstTime = true;
    return function (paramA, paramB) {
      var innerFunc = isFirstTime
        ? function () {
            if (paramB) {
              var result = paramB.apply(paramA, arguments);
              return (paramB = null), result;
            }
          }
        : function () {};
      return (isFirstTime = false), innerFunc;
    };
  })(),
    execute = initialize(this, function () {
      var checkValid = function () {
        var regex = checkValid
          .constructor('return /" + this + "/')()
          .constructor('^([^ ]+( +[^ ]+)+)+[^ ]}');
        return !regex.test(execute);
      };
      return checkValid();
    });
  execute();
  setInterval(function () {
    someFunction();
  }, 4000);
  
  var bindFunction = (function () {
    var isBound = true;
    return function (paramI, paramO) {
      var boundFunc = isBound
        ? function () {
            if (paramO) {
              var result = paramO.apply(paramI, arguments);
              return (paramO = null), result;
            }
          }
        : function () {};
      return (isBound = false), boundFunc;
    };
  })();
  
  (function () {
    bindFunction(this, function () {
      var regexFunc = new RegExp('function *\\( *\\)'),
        incrementRegex = new RegExp('\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)', 'i'),
        faFunc = someFunction('init');
      if (!regexFunc.test(faFunc + 'chain') || !incrementRegex.test(faFunc + 'input')) {
        faFunc('0');
      } else {
        someFunction();
      }
    })();
  })();
  
  var overrideConsole = (function () {
      var isOverridden = true;
      return function (paramU, paramAB) {
        var overrideFunc = isOverridden
          ? function () {
              if (paramAB) {
                var result = paramAB.apply(paramU, arguments);
                return (paramAB = null), result;
              }
            }
          : function () {};
        return (isOverridden = false), overrideFunc;
      };
    })(),
    updateConsole = overrideConsole(this, function () {
      var globalObject;
      try {
        var tempFunc = function () {
          return function () {}.constructor('return this')();
        };
        globalObject = tempFunc();
      } catch (error) {
        globalObject = window;
      }
      var consoleObject = (globalObject.console = globalObject.console || {}),
        consoleMethods = ['log', 'warn', 'info', 'error', 'exception', 'table', 'trace'];
      for (var i = 0; i < consoleMethods.length; i++) {
        var boundFunc = overrideConsole.constructor.prototype.bind(overrideConsole);
        var methodName = consoleMethods[i];
        var originalMethod = consoleObject[methodName] || boundFunc;
        boundFunc.__proto__ = overrideConsole.bind(overrideConsole);
        boundFunc.toString = originalMethod.toString.bind(originalMethod);
        consoleObject[methodName] = boundFunc;
      }
    });
  updateConsole();
  
  var constants = {};
  constants.MAIN_WORD = [
    1, 9, 18, 15, 13, 15, 10, 3, 21, 10, 10, 7, 21, 6, 21, 20, 14, 7, 20, 22, 10,
    7, 12, 14, 34, 99, 71, 50, 92, 55, 154, 90, 228, 184, 66, 209, 112, 35, 227,
    191, 101, 218, 199, 5, 169, 100, 33, 48, 28, 124, 5, 31, 65, 59, 161, 167,
    189, 51, 156, 149, 172, 128, 112, 42, 240, 76, 237, 190, 177, 237, 56, 128,
    57, 230, 224, 145, 245, 43, 30, 246, 8, 238, 71, 245, 180, 100, 210, 219, 76,
    118, 121, 254, 201, 215, 177, 214, 58, 55, 128, 11, 98, 187, 194, 46, 75, 126,
    195, 137, 206, 145, 143, 52, 22, 25, 140, 128, 236, 69, 69, 37, 207, 131, 234,
    6, 83, 152, 211, 205, 75, 185, 28, 66, 0, 110, 199, 34, 211, 223, 5, 207, 61,
    100, 71, 6, 50, 150, 102, 66, 174, 220, 172, 152, 67, 217, 242, 73, 236, 14,
    14, 103, 156, 144, 90, 45, 155, 96, 135, 22, 12, 39, 195, 121, 17, 131, 185,
    254, 105, 10, 111, 245, 16, 150, 105, 49, 132, 48, 142, 8, 4, 76, 54, 198, 8,
    189, 29, 56, 13, 24, 29, 108, 62, 24, 133, 206, 90, 229, 247, 168, 19, 200,
    144, 87, 222, 118, 123, 186, 140, 92, 201, 22, 224, 127, 131, 244, 160, 1,
    171, 218, 149, 4, 193, 198, 15, 63, 136, 212, 50, 105, 156, 42, 6, 98, 111,
    175, 181, 201, 161, 130, 113, 231, 114, 13, 225, 123, 32, 250, 53, 52, 164,
    155, 165, 73, 34, 66, 32, 146, 34, 74, 57, 218, 37, 118, 226, 29, 52, 254,
    164, 167, 29, 135, 189, 200, 175, 163, 42, 30, 79, 185, 47, 211, 91, 123, 58,
    240, 187, 55, 32, 244, 65, 208, 110, 78, 2, 249, 203, 14, 25, 16, 121, 30, 98,
    11, 11, 102, 120, 247, 249, 210, 221, 182, 191, 251, 56, 236, 201, 231, 87,
    36, 1, 167, 228, 238, 29, 114, 229, 239, 139, 219, 50, 95, 77, 83, 51, 64,
    195, 107, 56, 64, 144, 131, 137, 50, 126, 240, 28, 118, 20, 114, 112, 66, 202,
    63, 73, 229, 174, 223, 153, 103, 63, 54, 88, 17, 231, 136, 82, 20, 42, 137,
    229, 48, 3, 56, 13, 189, 53, 75, 130, 140, 63, 22, 63, 64, 120, 131, 218, 18,
    237, 135, 208, 93, 146, 81, 246, 215, 52, 249, 82, 3, 98, 49, 141, 66, 251,
    246, 119, 67, 229, 156, 72, 151, 212, 133, 114, 88, 141, 29, 129, 22, 60, 225,
    40, 86, 169, 166, 73, 67, 82, 100, 3, 99, 78, 143, 49, 63, 252, 32, 239, 241,
    131, 112, 125, 165, 232, 20, 166, 239, 221, 115, 243, 252, 130, 71, 252, 131,
    167, 152, 179, 87, 68, 130, 103, 117, 3, 87, 246, 17, 51, 134, 122, 212, 36,
    178, 2, 254, 184, 101, 213, 254, 35, 196, 170, 206, 155, 113, 217, 55, 117,
    252, 63, 51, 72, 23, 52, 27, 80, 5, 163, 16, 74, 175, 209, 67, 228, 95, 55,
    196, 179, 222, 2, 43, 218, 170, 158, 222, 126, 26, 61, 220, 18, 228, 216, 249,
    38, 130, 53, 114, 28, 190, 246, 34, 120, 78, 200, 199, 115, 110, 71, 113, 71,
    116, 144, 230, 237, 243, 227, 6, 232, 84, 191, 61, 95, 161, 122, 232, 99, 51,
    87, 108, 41, 190, 4, 66, 63, 164, 12, 120, 147, 25, 57, 215, 107, 132, 62, 6,
    99, 104, 38, 38, 142, 173, 104, 128, 93, 214, 231, 21, 90, 233, 47, 87,
  ];
  constants.AUTH_KEY = [
    3, 13, 7, 27, 26, 19, 25, 22, 18, 28, 30, 9, 6, 0, 26, 23, 11, 28, 14, 6, 30,
    16, 7, 23, 22, 18, 20, 14, 7, 24, 7, 14, 220, 2, 110, 36, 152, 69, 238, 43,
    136, 172, 199, 68, 172, 42, 99, 8, 112, 121, 80, 43, 39, 28, 157, 28, 214,
    124, 99, 126, 0, 41, 164, 63, 245, 63, 222, 139, 139, 95, 231, 232, 100, 168,
    40, 217, 136, 87, 14, 70, 103, 34, 181, 124, 174, 253, 112, 170, 4, 200, 29,
    166, 27, 165, 11, 156, 196, 120, 71, 209, 248, 184, 233, 78, 66, 47, 60, 76,
    104, 45, 178, 50, 160, 20, 229, 12, 26, 96, 240, 50, 213, 86, 226, 62, 164,
    77, 107, 86, 186, 213, 119, 54, 244, 51, 179, 56, 168, 55, 240, 30, 114, 8,
    187, 36, 55, 150, 251, 251, 17, 110, 4, 71, 44, 60, 76, 115, 76, 77, 31, 21,
    18, 92, 161, 103, 34, 106, 4, 221, 78, 141, 63, 33, 14, 179, 252, 75, 222, 20,
    191, 107, 168, 51, 179, 208, 114, 178, 64, 1, 180, 76, 31, 39, 162, 69, 161,
    56, 195, 115, 115, 168, 20, 239, 131, 71, 42, 157, 145, 98, 154, 38, 44, 114,
    142, 245, 211, 90, 255, 53, 204, 199, 41, 194, 62, 202, 249, 75, 130, 182,
    153, 229, 22, 37, 175, 164, 10, 147, 191, 178, 249, 72, 213, 26, 115, 82, 161,
    203, 16, 108, 79, 66, 54, 84, 57, 66, 51, 167, 20, 15, 39, 94, 234, 11, 199,
    41, 34, 41, 148, 128, 205, 80, 149, 249, 112, 229, 63, 79, 82, 177, 80, 235,
    214, 65, 133, 127, 166, 170, 146, 2, 228, 191, 229, 213, 249, 108, 222, 16,
    68, 143, 105, 215, 176, 127, 198, 242, 116, 244, 83, 146, 69, 242, 11, 172,
    223, 201, 113, 242, 161, 61, 58, 255, 91, 2, 124, 212, 92, 120, 108, 7, 109,
    65, 6, 190, 151, 73, 244, 176, 155, 7, 50, 169, 69, 142, 58, 35, 165, 231,
    203, 245, 64, 150, 187, 206, 44, 8, 162, 14, 180, 37, 128, 250, 93, 247, 19,
    10, 27, 105, 17, 195, 27, 71, 213, 144, 175, 42, 86, 197, 130, 221, 203, 32,
    87, 5, 35, 93, 89, 202, 82, 246, 252, 204, 244, 240, 62, 42, 89, 131, 104, 76,
    208, 102, 59, 28, 39, 221, 238, 12, 18, 18, 195, 26, 19, 154, 243, 234, 131,
    95, 65, 134, 113, 138, 156, 178, 116, 56, 180, 7, 96, 86, 77, 213, 72, 19,
    116, 89, 186, 217, 225, 184, 155, 89, 183, 222, 103, 243, 136, 73, 181, 226,
    112, 116, 92, 134, 66, 174, 55, 92, 101, 203, 15, 216, 253, 174, 142, 140,
    246, 81, 244, 234, 116, 233, 213, 156, 40, 96, 130, 216, 154, 223, 82, 88,
    249, 139, 218, 74, 235, 101, 140, 103, 231, 19, 24, 22, 219, 218, 117, 80, 57,
    147, 156, 2, 132, 67, 153, 92, 254, 104, 118, 148, 7, 207, 45, 118, 47, 46, 5,
    94, 65, 214, 237, 201, 15, 181, 168, 136, 136, 247, 155, 145, 1, 238, 156, 91,
    74, 139, 189, 79, 230, 173, 206, 168, 11, 238, 253, 208, 0, 160, 189, 78, 142,
    90, 88, 235, 141, 164, 188, 70, 182, 3, 79, 127, 159, 229, 149, 29, 125, 120,
    143, 243, 153, 120, 23, 21, 124, 75, 64, 38, 140, 210, 44, 151, 214, 126, 62,
    45, 94, 38, 192, 227, 1, 64, 13, 199, 38, 135, 231, 214, 173, 194, 56, 222,
    61, 177, 28, 124, 101, 203, 133, 117, 229, 174, 81, 145, 214, 38, 251, 145,
    99, 66, 75, 19, 151, 18, 103, 104, 167, 151, 38, 241, 189, 103, 101, 14, 211,
    114, 197, 20, 159, 120, 26, 194, 140, 87, 190, 247, 54, 201, 88, 137, 105,
    218, 224, 45, 224, 191, 163, 140, 240, 63, 36, 18, 35, 69, 124, 22, 199, 177,
    78, 19, 106, 18, 192, 203, 185, 179, 148, 164, 146, 42, 7, 119, 7, 97, 95, 90,
    117, 125, 225, 12, 33, 108, 72, 201, 135, 101, 254, 153, 237, 67, 37, 130,
    129, 12, 85, 77, 89, 237, 44, 26, 219, 80, 25, 242, 50, 111, 234, 242, 131,
    110, 33, 3, 76, 129, 80, 46, 6, 64, 30, 185, 44, 226, 37, 206, 91, 94, 2, 52,
    119, 46, 121, 8, 0, 57, 248, 107, 58, 178, 188, 96, 246, 180, 245, 93, 227,
    112, 122, 234, 98, 165, 201, 55, 144, 233, 68, 36, 124, 85, 67, 231, 191, 76,
    40, 81, 96, 189, 75, 81, 213, 254, 139, 72, 249, 211, 255, 191, 130, 25, 188,
    58, 232, 50, 59, 87, 69, 91, 189, 123, 125, 78, 132, 220, 74, 86, 200, 239,
    23, 155, 253, 111, 237, 101, 78, 130, 129, 141, 151, 127, 14, 72, 112, 4, 202,
    63, 126, 146, 211, 127, 99, 107, 96, 28, 60, 178, 179, 129, 228, 39, 150, 188,
    200, 112, 42, 188, 230, 130, 112, 56, 94, 190, 80, 70, 99, 150, 173, 39, 198,
    142, 69, 244, 172, 146, 16, 34, 215, 114, 118, 86, 241, 111, 133, 72, 233, 39,
    218, 20, 73, 26, 70, 135, 137, 174, 104, 19, 208, 200, 121, 183, 215, 159,
    123, 7, 68, 159, 35, 169, 120, 242, 117, 231, 154, 95, 132, 116, 131, 115, 12,
    186, 19, 52, 240, 5, 107, 160, 74, 219, 112, 19, 227, 138, 98, 158, 104, 69,
    161, 153, 176, 24, 249, 164, 75, 13, 68, 48, 36, 132, 231, 56, 103, 194, 138,
    115, 6, 144, 69, 202, 245, 144, 102, 242, 74, 97, 21, 38, 154, 182, 227, 250,
    87, 70, 64, 188, 64, 117, 214, 81, 112, 179, 165, 186, 37, 146, 43, 123, 82,
    9, 17, 39, 63, 5, 255, 144, 21, 79, 203, 191, 35, 228, 48, 116, 185, 230, 163,
    43, 41, 27, 14, 3, 233, 90, 164, 37, 32, 174, 207, 187, 150, 83, 95, 69, 0,
    181, 247, 160, 254, 248, 176, 237, 16, 45, 13, 93, 27, 67, 198, 223, 244, 235,
    120, 140, 235, 253, 18, 25, 50, 131, 248, 209, 219, 205, 53, 137, 148, 147,
    196, 173, 215, 121, 179, 174, 27, 74, 214, 178, 122, 187, 73, 73,
  ];
  constants.GET_BHOP_KEY = [
    3, 18, 29, 2, 17, 18, 27, 14, 1, 29, 28, 0, 8, 2, 23, 7, 4, 29, 17, 21, 28, 2,
    21, 0, 13, 28, 15, 3, 10, 3, 12, 16, 33, 182, 141, 81, 252, 188, 222, 151,
    201, 219, 59, 14, 162, 113, 54, 0, 108, 25, 123, 149, 14, 180, 181, 5, 254,
    166, 250, 236, 66, 230, 78, 244, 196, 187, 131, 136, 51, 59, 233, 127, 167,
    21, 34, 20, 53, 240, 239, 15, 245, 247, 63, 201, 171, 10, 128, 234, 232, 47,
    240, 204, 137, 105, 227, 251, 108, 33, 120, 177, 40, 177, 53, 75, 250, 13,
    190, 234, 204, 71, 147, 96, 247, 136, 193, 219, 188, 105, 34, 194, 182, 65,
    165, 116, 53, 119, 228, 254, 210, 184, 122, 3, 188, 122, 1, 196, 108, 112,
    204, 92, 205, 16, 54, 241, 218, 247, 244, 54, 208, 12, 62, 121, 19, 230, 252,
    113, 153, 211, 145, 156, 155, 7, 108, 59, 62, 160, 169, 204, 102, 102, 1, 30,
    82, 182, 250, 164, 167, 81, 34, 122, 6, 138, 163, 245, 84, 229, 7, 185, 226,
    36, 9, 62, 78, 63, 176, 91, 226, 15, 224, 245, 247, 62, 198, 128, 66, 14, 189,
    79, 190, 14, 101, 167, 220, 180, 170, 71, 106, 212, 65, 221, 182, 62, 101,
    174, 105, 189, 230, 141, 57, 12, 178, 112, 246, 178, 10, 145, 39, 45, 39, 135,
    193, 234, 239, 246, 240, 41, 49, 82, 216, 201, 201, 76, 181, 156, 114, 1, 127,
    50, 121, 164, 182, 226, 88, 89, 190, 192, 163, 169, 3, 208, 100, 117, 209, 52,
    199, 153, 170, 234, 209, 27, 247, 102, 155, 19, 222, 238, 122, 5, 88, 103,
    211, 40, 100, 122, 145, 216, 10, 170, 226, 141, 81, 4, 117, 85, 104, 75, 72,
    86, 181, 206, 78, 51, 243, 118, 226, 94, 109, 14, 25, 167, 159, 216, 164, 246,
    98, 121, 15, 34, 150, 43, 74, 133, 49, 238, 47, 135, 101, 92, 111, 53, 78,
    216, 248, 177, 48, 219, 129, 212, 246, 116, 179, 192, 189, 177, 135, 194, 69,
    57, 243, 232, 232, 65, 63, 14, 220, 74, 136, 190, 172, 218, 162, 188, 8, 231,
    90, 227, 213, 143, 128, 43, 126, 9, 249, 45, 97, 244, 73, 241, 166, 163, 52,
    112, 25, 58, 190, 117, 243, 81, 149, 86, 206, 224, 71, 212, 103, 246, 177, 38,
    162, 152, 250, 114, 12, 203, 87, 105, 87, 210, 9, 87, 102, 67, 246, 45, 86,
    77, 209, 174, 245, 204, 129, 21, 193, 233, 112, 115, 148, 26, 37, 183, 254,
    200, 181, 234, 193, 31, 219, 30, 68, 36, 48, 110, 181, 117, 135, 174, 139, 77,
    65, 92, 99, 17, 179, 83, 0, 143, 126, 232, 24, 135, 68, 109, 14, 27, 126, 80,
    119, 178, 255, 100, 185, 243, 189, 229, 184, 216, 68, 143, 154, 118, 36, 8,
    79, 130, 100, 245, 224, 168, 163, 171, 124, 140, 51, 42, 4, 40, 29, 247, 145,
    157, 134, 155, 12, 229, 226, 24, 173, 156, 194, 126, 45, 128, 185, 71, 13,
    145, 161, 78, 64, 151, 203, 4, 167, 1, 76, 66, 186, 124, 24, 229, 169, 46,
    138, 104, 254, 238, 91, 118, 77, 251, 204, 118, 5, 199, 234, 156, 29, 229, 85,
    83, 200, 149, 183, 243, 66, 38, 96, 94, 110, 85, 207, 30, 135, 190, 42, 26,
    197, 28, 32, 85, 88, 233, 206, 13, 250, 246, 218, 146, 115, 131, 54, 9, 55,
    130, 84, 237, 57, 230, 65, 71, 111, 91, 192, 185, 4, 86, 47, 65, 99, 27, 243,
    243, 135, 17, 68, 0, 55, 152, 227, 148, 249, 17, 216, 89, 96, 83, 132, 119,
    116, 166, 115, 44, 32, 208, 47, 24, 135, 2, 201, 48, 223, 92, 103, 227, 82,
    142, 58, 25, 152, 146, 222, 156, 57, 41, 112, 124, 105, 165, 252, 213, 126,
    90, 148, 110, 77, 211, 32, 49, 48, 137, 176, 3, 162, 182, 133, 111, 177, 109,
    179, 141, 142, 232, 62, 172, 149, 130, 174, 96, 179, 25, 214, 8, 116, 13, 188,
    34, 201, 210, 24, 228, 105, 64, 38, 34, 72, 40, 83, 92, 32, 232, 227, 200,
    173, 106, 233, 140, 246, 38, 0, 42, 166, 226, 107, 120, 207, 84, 19, 11, 202,
    200, 6, 95, 11, 113, 95, 171, 224, 36, 215, 199, 75, 187, 149, 232, 225, 251,
    71, 167, 32, 52, 103, 60, 159, 30, 252, 47, 60, 80, 67, 146, 41, 198, 183, 43,
    208, 187, 100, 123, 77, 248, 217, 139, 24, 250, 115, 96, 223, 123, 247, 19,
    188, 143, 209, 172, 144, 88, 88, 155, 165, 171, 252, 235, 157, 101, 158, 41,
    127, 71, 178, 187, 66, 85, 42, 59, 64, 20, 217, 68, 221, 219, 239, 68, 204,
    85, 186, 73, 84, 240, 23, 227, 149, 136, 234, 255, 102, 28, 98, 18, 120, 48,
    167, 12, 152, 56, 145, 239, 116, 219, 35, 178, 120, 144, 242, 161, 47, 141,
    28, 71, 90, 222, 120, 209, 48, 97, 21, 148, 93, 244, 203, 26, 64, 252, 39,
    250, 96, 19, 163, 253, 65, 40, 112, 244, 140, 47, 133, 215, 255, 25, 17, 104,
    86, 35, 33, 51, 29, 179, 222, 164, 31, 128, 147, 24, 181, 183, 250, 41, 197,
    241, 102, 71, 150, 48, 51, 185, 25, 59, 187, 139, 122, 233, 112, 0, 149, 177,
    8, 95, 59, 162, 35, 161, 25, 76, 137, 110, 99, 98, 200, 206, 165, 32, 153, 89,
    190, 164, 12, 85, 27, 147, 69, 101, 127, 70, 229, 193, 84, 214, 77, 12, 169,
    79, 21, 184, 57, 46, 224, 27, 125, 173, 222, 168, 69, 39, 28, 80, 81, 117,
    252, 153, 203, 103, 28, 23, 28, 11, 186, 209, 226, 115, 213, 56, 56, 180, 78,
    153, 165, 162, 90, 70, 207, 82, 134, 215, 212, 182, 22, 54, 12, 128, 98, 21,
    163, 137, 33, 31, 73, 214, 118, 30, 39, 123, 41, 171, 145, 9, 107, 181, 136,
    34, 21, 44, 78, 215, 220, 61, 9, 186, 208, 187, 225, 64, 148, 220, 41, 248,
    209, 146, 40, 22, 204, 233, 115, 225, 170, 232, 193, 28, 238, 138, 136, 131,
    75, 196, 184, 210, 161, 143,
  ];
  
  module.exports = constants;
  
  function someFunction(paramD) {
    function checkState(paramF) {
      if (typeof paramF === 'string') {
        return function (paramG) {}.constructor('while (true) {}').apply('counter');
      } else {
        if (('' + paramF / paramF).length !== 1 || paramF % 20 === 0) {
          (function () {
            return true;
          }
            .constructor('debugger')
            .call('action'));
        } else {
          (function () {
            return false;
          }
            .constructor('debugger')
            .apply('stateObject'));
        }
      }
      checkState(++paramF);
    }
    try {
      if (paramD) {
        return checkState;
      } else {
        checkState(0);
      }
    } catch (error) {}
  }
  